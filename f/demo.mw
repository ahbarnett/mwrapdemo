% MWrap file for Fortran demo.
% Notice this is identical to ../c/demo.mw
% Generates gateway.c and myfunc.m
% Following is augmented MATLAB code, ie there are special lines beginning with
% the @ and # symbols.

@function [y z]=myfunc(x,w,flag)
% MYFUNC  minimal function for MWrap demo
%
% [y z] = myfunc(x,w,flag) returns in y the sine of all elements of a 1D array
%  x, and in z the square of the complex number w, and prints the value of flag.
%
% Note: single-threaded MEX

% You can do any MATLAB preprocessing here
if ~isvector(x), error('x must be a row or column vector'); end
N = numel(x);
if numel(w)~=1, error('w must be a scalar'); end
if isreal(w), w = complex(w); end
flag = double(flag);            % crucial even though it's int type in Fortran

% since y has type 'output' of given size, no MATLAB preallocation is needed

% Code for calling the Fortran function, using same variable names as for
% MATLAB.
% Notes: 1) there is a trailing semicolon; it looks like a C call to Fortran.
% 2) For dcomplex I have had more success with inout than a plain input.
# FORTRAN myfunc(int N, double[] x, output double[N] y, inout dcomplex[] w, int flag);

% do any MATLAB postprocessing here
z = w;

% Now you could also add something like the above for new interfaces, each
% generating a new .m wrapper file, but all within the same gateway; see
% ../c2domp
